==============================
1. First Sample
==============================
import os
import yt_dlp

# Define the download folder
DOWNLOAD_FOLDER = "Video Downloaded"
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# Common yt-dlp options for best single stream (no ffmpeg required)
YDL_OPTS = {
    'outtmpl': os.path.join(DOWNLOAD_FOLDER, '%(title)s.%(ext)s'),
    'format': 'best',  # Selects the best pre-merged video+audio stream
    'merge_output_format': 'mp4',
    'noplaylist': True,
}

def download_single_video():
    url = input("\nüì• Enter YouTube video or Shorts URL: ")
    with yt_dlp.YoutubeDL(YDL_OPTS) as ydl:
        try:
            ydl.download([url])
            print(f"‚úÖ Download complete ‚ûú Saved in '{DOWNLOAD_FOLDER}'\n")
        except Exception as e:
            print(f"‚ùå Error: {e}\n")

def download_multiple_videos():
    print("\nüì• Paste each YouTube URL. Type 'done' when finished.")
    urls = []
    while True:
        url = input("URL: ")
        if url.strip().lower() == 'done':
            break
        urls.append(url.strip())

    if not urls:
        print("‚ö†Ô∏è No URLs entered.\n")
        return

    with yt_dlp.YoutubeDL(YDL_OPTS) as ydl:
        for url in urls:
            try:
                ydl.download([url])
                print(f"‚úÖ Downloaded: {url}")
            except Exception as e:
                print(f"‚ùå Failed to download {url}: {e}")
    print(f"‚úÖ All downloads finished ‚ûú Saved in '{DOWNLOAD_FOLDER}'\n")

def download_profile_placeholder():
    print("\nüöß Full profile/channel download:")
    print("To download an entire channel or playlist, uncomment the playlist option below.\n")
    print("Example (uncomment `YDL_OPTS['noplaylist'] = False`):")
    print("    YDL_OPTS['noplaylist'] = False")
    print("    ydl.download(['https://www.youtube.com/c/YourChannel/videos'])\n")
    print("Or just run:\n    yt-dlp -o 'Video Downloaded/%(title)s.%(ext)s' -f best '<channel_or_playlist_URL>'\n")

def main():
    while True:
        print("\n==== yt-dlp YouTube Downloader ====")
        print("1. Download Single Video or Short")
        print("2. Download Multiple Videos")
        print("3. Download The Whole Profile/Playlist (Instructions)")
        print("0. Exit")
        choice = input("Choose an option (0-3): ").strip()

        if choice == "1":
            download_single_video()
        elif choice == "2":
            download_multiple_videos()
        elif choice == "3":
            download_profile_placeholder()
        elif choice == "0":
            print("üëã Goodbye!")
            break
        else:
            print("‚ùå Invalid choice. Please try again.\n")

if __name__ == "__main__":

   main()


==============================
2.  English Letter and simple fonts adn not change yet
==============================

import os
import yt_dlp
import tkinter as tk
from tkinter import messagebox, scrolledtext, font
import threading
import shutil

# Define the download folder
DOWNLOAD_FOLDER = "Video Downloaded"
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)


# Check if ffmpeg is installed
def is_ffmpeg_installed():
    return shutil.which("ffmpeg") is not None


# Load Khmer font dynamically if not installed
def load_khmer_font():
    font_path = os.path.join(os.path.dirname(__file__), "KhmerOS_siemreap.ttf")
    if os.path.exists(font_path):
        try:
            font.Font(family="Khmer OS Siemreap Custom", size=12, weight="bold", file=font_path)
            font.Font(family="Khmer OS Siemreap Custom", size=10, file=font_path)
            return "Khmer OS Siemreap Custom"
        except Exception as e:
            print(f"Warning: Could not load KhmerOS_siemreap.ttf: {e}")
            return "Khmer OS Siemreap"  # Try system-installed font
    return "Khmer OS Siemreap"  # Fallback to system-installed font


# Common yt-dlp options
YDL_OPTS = {
    'outtmpl': os.path.join(DOWNLOAD_FOLDER, '%(uploader)s/%(title)s.%(ext)s'),
    'format': 'bestvideo+bestaudio/best' if is_ffmpeg_installed() else 'best',
    'merge_output_format': 'mp4',
    'noplaylist': True,
}

# Options for channel/playlist download
YDL_OPTS_CHANNEL = {
    'outtmpl': os.path.join(DOWNLOAD_FOLDER, '%(uploader)s/%(title)s.%(ext)s'),
    'format': 'bestvideo+bestaudio/best' if is_ffmpeg_installed() else 'best',
    'merge_output_format': 'mp4',
    'noplaylist': False,
    'ignoreerrors': True,
}


class YouTubeDownloaderGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Frog Downloader ")
        self.root.geometry("600x600")
        self.root.configure(bg='#E0F7E0')

        # Set window icon
        try:
            self.root.iconphoto(True, tk.PhotoImage(file="youtube.png"))
        except Exception as e:
            print(f"Warning: Could not load icon 'youtube.png': {e}")

        # Main frame
        self.main_frame = tk.Frame(self.root, padx=10, pady=10, bg='#E0F7E0')
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        # Khmer-style font for labels
        khmer_font = load_khmer_font()
        label_font = (khmer_font, 12, "bold") if khmer_font else ("Arial", 12, "bold")
        secondary_font = (khmer_font, 10) if khmer_font else ("Arial", 10)

        # Single video download section
        tk.Label(self.main_frame, text="Download Single Video or Short", font=label_font, bg='#E0F7E0').pack(anchor="w")
        tk.Label(self.main_frame, text="Enter YouTube URL:", font=secondary_font, bg='#E0F7E0').pack(anchor="w")
        self.single_url_entry = tk.Entry(self.main_frame, width=60)
        self.single_url_entry.pack(pady=5)
        tk.Button(self.main_frame, text="Download Single Video", command=self.download_single, bg='#D0E7D0').pack(
            pady=5)

        # Multiple videos download section
        tk.Label(self.main_frame, text="Download Multiple Videos", font=label_font, bg='#E0F7E0').pack(anchor="w",
                                                                                                       pady=10)
        tk.Label(self.main_frame, text="Enter YouTube URLs (one per line):", font=secondary_font, bg='#E0F7E0').pack(
            anchor="w")
        self.multi_url_text = scrolledtext.ScrolledText(self.main_frame, width=60, height=5)
        self.multi_url_text.pack(pady=5)
        tk.Button(self.main_frame, text="Download Multiple Videos", command=self.download_multiple, bg='#D0E7D0').pack(
            pady=5)

        # Channel/playlist download section
        tk.Label(self.main_frame, text="Download Entire Channel or Playlist", font=label_font, bg='#E0F7E0').pack(
            anchor="w", pady=10)
        tk.Label(self.main_frame,
                 text="Enter Channel/Playlist URL (e.g., https://www.youtube.com/c/YourChannel/videos):",
                 font=secondary_font, bg='#E0F7E0').pack(anchor="w")
        self.channel_url_entry = tk.Entry(self.main_frame, width=60)
        self.channel_url_entry.pack(pady=5)
        tk.Button(self.main_frame, text="Download Channel/Playlist", command=self.download_channel, bg='#D0E7D0').pack(
            pady=5)

        # Status display
        tk.Label(self.main_frame, text="Status:", font=label_font, bg='#E0F7E0').pack(anchor="w", pady=10)
        self.status_text = scrolledtext.ScrolledText(self.main_frame, width=60, height=10, state='disabled')
        self.status_text.pack(pady=5)

        # Exit button
        tk.Button(self.main_frame, text="Exit", command=self.root.quit, bg='#D0E7D0').pack(pady=5)

        # Note about ffmpeg
        ffmpeg_status = "ffmpeg detected. Using best quality." if is_ffmpeg_installed() else "ffmpeg not detected. Using single stream (lower quality). Install ffmpeg for best quality."
        self.log_status(f"Info: {ffmpeg_status}")

    def log_status(self, message):
        self.status_text.config(state='normal')
        self.status_text.insert(tk.END, f"{message}\n")
        self.status_text.see(tk.END)
        self.status_text.config(state='disabled')

    def download_single(self):
        url = self.single_url_entry.get().strip()
        if not url:
            messagebox.showerror("Error", "Please enter a URL.")
            return
        threading.Thread(target=self.download_single_thread, args=(url,), daemon=True).start()

    def download_single_thread(self, url):
        self.log_status(f"Downloading: {url}")
        with yt_dlp.YoutubeDL(YDL_OPTS) as ydl:
            try:
                ydl.download([url])
                self.log_status(f"‚úÖ Download complete ‚ûú Saved in '{DOWNLOAD_FOLDER}'")
            except Exception as e:
                self.log_status(f"‚ùå Error: {e}")
                messagebox.showerror("Error", f"Failed to download {url}: {e}")

    def download_multiple(self):
        urls = self.multi_url_text.get("1.0", tk.END).strip().splitlines()
        urls = [url.strip() for url in urls if url.strip()]
        if not urls:
            messagebox.showerror("Error", "Please enter at least one URL.")
            return
        threading.Thread(target=self.download_multiple_thread, args=(urls,), daemon=True).start()

    def download_multiple_thread(self, urls):
        self.log_status("Starting multiple downloads...")
        with yt_dlp.YoutubeDL(YDL_OPTS) as ydl:
            for url in urls:
                try:
                    self.log_status(f"Downloading: {url}")
                    ydl.download([url])
                    self.log_status(f"‚úÖ Downloaded: {url}")
                except Exception as e:
                    self.log_status(f"‚ùå Failed to download {url}: {e}")
        self.log_status(f"‚úÖ All downloads finished ‚ûú Saved in '{DOWNLOAD_FOLDER}'")

    def download_channel(self):
        url = self.channel_url_entry.get().strip()
        if not url:
            messagebox.showerror("Error", "Please enter a channel or playlist URL.")
            return
        threading.Thread(target=self.download_channel_thread, args=(url,), daemon=True).start()

    def download_channel_thread(self, url):
        self.log_status(f"Starting channel/playlist download: {url}")
        with yt_dlp.YoutubeDL(YDL_OPTS_CHANNEL) as ydl:
            try:
                ydl.download([url])
                self.log_status(f"‚úÖ Channel/playlist download complete ‚ûú Saved in '{DOWNLOAD_FOLDER}'")
            except Exception as e:
                self.log_status(f"‚ùå Error downloading channel/playlist: {e}")
                messagebox.showerror("Error", f"Failed to download channel/playlist: {e}")


if __name__ == "__main__":
    root = tk.Tk()
    app = YouTubeDownloaderGUI(root)
    root.mainloop()

==============================
3.  Khmer Letter and Khmer Os Siemreap fonts 
==============================

import os
import yt_dlp
import tkinter as tk
from tkinter import messagebox, scrolledtext, font
import threading
import shutil

# Define the download folder
DOWNLOAD_FOLDER = "Video Downloaded"
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)


# Check if ffmpeg is installed
def is_ffmpeg_installed():
    return shutil.which("ffmpeg") is not None


# Load Khmer font dynamically
def load_khmer_font():
    font_path = r"E:\PythyonLanguage\PythonYouTube\KhmerOS_siemreap.ttf"  # Absolute path
    if os.path.exists(font_path):
        try:
            font.Font(family="Khmer OS Siemreap Custom", size=12, weight="bold", file=font_path)
            font.Font(family="Khmer OS Siemreap Custom", size=10, file=font_path)
            return "Khmer OS Siemreap Custom"
        except Exception as e:
            print(f"Warning: Could not load KhmerOS_siemreap.ttf: {e}")
            return "Khmer OS Siemreap"  # Try system-installed font
    return "Khmer OS Siemreap"  # Fallback to system-installed font


# Common yt-dlp options
YDL_OPTS = {
    'outtmpl': os.path.join(DOWNLOAD_FOLDER, '%(uploader)s/%(title)s.%(ext)s'),
    'format': 'bestvideo+bestaudio/best' if is_ffmpeg_installed() else 'best',
    'merge_output_format': 'mp4',
    'noplaylist': True,
}

# Options for channel/playlist download
YDL_OPTS_CHANNEL = {
    'outtmpl': os.path.join(DOWNLOAD_FOLDER, '%(uploader)s/%(title)s.%(ext)s'),
    'format': 'bestvideo+bestaudio/best' if is_ffmpeg_installed() else 'best',
    'merge_output_format': 'mp4',
    'noplaylist': False,
    'ignoreerrors': True,
}


class YouTubeDownloaderGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Frog Downloader")
        self.root.geometry("600x600")
        self.root.configure(bg='#E0F7E0')

        # Set window icon
        try:
            self.root.iconphoto(True, tk.PhotoImage(file="youtube.png"))
        except Exception as e:
            print(f"Warning: Could not load icon 'youtube.png': {e}")

        # Main frame
        self.main_frame = tk.Frame(self.root, padx=10, pady=10, bg='#E0F7E0')
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        # Khmer-style font for labels and buttons
        khmer_font = load_khmer_font()
        label_font = (khmer_font, 12, "bold") if khmer_font else ("Arial", 12, "bold")
        secondary_font = (khmer_font, 10) if khmer_font else ("Arial", 10)
        button_font = (khmer_font, 10) if khmer_font else ("Arial", 10)

        # Single video download section
        tk.Label(self.main_frame, text="·ûë·û∂·ûâ·ûô·ûÄ·ûú·û∏·ûå·û∏·û¢·ûº·ûè·üÇ·ûò·ûΩ·ûô ·û¨·ûú·û∏·ûå·û∏·û¢·ûº·ûÅ·üí·ûõ·û∏", font=label_font, bg='#E0F7E0').pack(anchor="w")
        tk.Label(self.main_frame, text="·ûî·ûâ·üí·ûÖ·ûº·ûõ URL ·ûô·ûº·ûí·ûº·ûî:", font=secondary_font, bg='#E0F7E0').pack(anchor="w")
        self.single_url_entry = tk.Entry(self.main_frame, width=60)
        self.single_url_entry.pack(pady=5)
        tk.Button(self.main_frame, text="·ûë·û∂·ûâ·ûô·ûÄ·ûú·û∏·ûå·û∏·û¢·ûº·ûè·üÇ·ûò·ûΩ·ûô", font=button_font, command=self.download_single,
                  bg='#D0E7D0').pack(pady=5)

        # Multiple videos download section
        tk.Label(self.main_frame, text="·ûë·û∂·ûâ·ûô·ûÄ·ûú·û∏·ûå·û∏·û¢·ûº·ûÖ·üí·ûö·ûæ·ûì", font=label_font, bg='#E0F7E0').pack(anchor="w", pady=10)
        tk.Label(self.main_frame, text="·ûî·ûâ·üí·ûÖ·ûº·ûõ URL ·ûô·ûº·ûí·ûº·ûî (·ûò·ûΩ·ûô·ûÄ·üí·ûì·ûª·ûÑ·ûò·ûΩ·ûô·ûî·ûì·üí·ûë·û∂·ûè·üã):", font=secondary_font,
                 bg='#E0F7E0').pack(anchor="w")
        self.multi_url_text = scrolledtext.ScrolledText(self.main_frame, width=60, height=5)
        self.multi_url_text.pack(pady=5)
        tk.Button(self.main_frame, text="·ûë·û∂·ûâ·ûô·ûÄ·ûú·û∏·ûå·û∏·û¢·ûº·ûÖ·üí·ûö·ûæ·ûì", font=button_font, command=self.download_multiple,
                  bg='#D0E7D0').pack(pady=5)

        # Channel/playlist download section
        tk.Label(self.main_frame, text="·ûë·û∂·ûâ·ûô·ûÄ·ûÜ·û∂·ûì·üÇ·ûõ ·û¨·ûî·ûâ·üí·ûá·û∏·ûÖ·û∂·ûÄ·üã·ûë·û∂·üÜ·ûÑ·ûò·ûº·ûõ", font=label_font, bg='#E0F7E0').pack(anchor="w",
                                                                                                           pady=10)
        tk.Label(self.main_frame, text="·ûî·ûâ·üí·ûÖ·ûº·ûõ URL ·ûÜ·û∂·ûì·üÇ·ûõ/·ûî·ûâ·üí·ûá·û∏·ûÖ·û∂·ûÄ·üã (·ûß. https://www.youtube.com/c/YourChannel/videos):",
                 font=secondary_font, bg='#E0F7E0').pack(anchor="w")
        self.channel_url_entry = tk.Entry(self.main_frame, width=60)
        self.channel_url_entry.pack(pady=5)
        tk.Button(self.main_frame, text="·ûë·û∂·ûâ·ûô·ûÄ·ûÜ·û∂·ûì·üÇ·ûõ/·ûî·ûâ·üí·ûá·û∏·ûÖ·û∂·ûÄ·üã", font=button_font, command=self.download_channel,
                  bg='#D0E7D0').pack(pady=5)

        # Status display
        tk.Label(self.main_frame, text="·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ:", font=label_font, bg='#E0F7E0').pack(anchor="w", pady=10)
        self.status_text = scrolledtext.ScrolledText(self.main_frame, width=60, height=10, state='disabled',
                                                     font=secondary_font)
        self.status_text.pack(pady=5)

        # Exit button
        tk.Button(self.main_frame, text="·ûÖ·û∂·ûÄ·ûÖ·üÅ·ûâ", font=button_font, command=self.root.quit, bg='#D0E7D0').pack(pady=5)

        # Note about ffmpeg
        ffmpeg_status = "ffmpeg ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·ûö·ûÄ·ûÉ·ûæ·ûâ·üî ·ûî·üí·ûö·ûæ·ûÇ·ûª·ûé·ûó·û∂·ûñ·ûõ·üí·û¢·ûî·üÜ·ûï·ûª·ûè·üî" if is_ffmpeg_installed() else "ffmpeg ·ûò·û∑·ûì·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·ûö·ûÄ·ûÉ·ûæ·ûâ·üî ·ûî·üí·ûö·ûæ·ûü·üí·ûë·üí·ûö·û∏·ûò·ûè·üÇ·ûò·ûΩ·ûô (·ûÇ·ûª·ûé·ûó·û∂·ûñ·ûë·û∂·ûî·ûá·û∂·ûÑ)·üî ·ûä·üÜ·û°·ûæ·ûÑ ffmpeg ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûÇ·ûª·ûé·ûó·û∂·ûñ·ûõ·üí·û¢·ûî·üÜ·ûï·ûª·ûè·üî"
        self.log_status(f"·ûñ·üê·ûè·üå·ûò·û∂·ûì: {ffmpeg_status}")

    def log_status(self, message):
        self.status_text.config(state='normal')
        self.status_text.insert(tk.END, f"{message}\n")
        self.status_text.see(tk.END)
        self.status_text.config(state='disabled')

    def download_single(self):
        url = self.single_url_entry.get().strip()
        if not url:
            messagebox.showerror("·ûÄ·üÜ·û†·ûª·ûü", "·ûü·ûº·ûò·ûî·ûâ·üí·ûÖ·ûº·ûõ URL·üî")
            return
        threading.Thread(target=self.download_single_thread, args=(url,), daemon=True).start()

    def download_single_thread(self, url):
        self.log_status(f"·ûÄ·üÜ·ûñ·ûª·ûÑ·ûë·û∂·ûâ·ûô·ûÄ: {url}")
        with yt_dlp.YoutubeDL(YDL_OPTS) as ydl:
            try:
                ydl.download([url])
                self.log_status(f"‚úÖ ·ûë·û∂·ûâ·ûô·ûÄ·ûî·û∂·ûì·ûü·ûò·üí·ûö·üÅ·ûÖ ‚ûú ·ûö·ûÄ·üí·ûü·û∂·ûë·ûª·ûÄ·ûì·üÖ '{DOWNLOAD_FOLDER}'")
            except Exception as e:
                self.log_status(f"‚ùå ·ûÄ·üÜ·û†·ûª·ûü: {e}")
                messagebox.showerror("·ûÄ·üÜ·û†·ûª·ûü", f"·ûî·ûö·û∂·ûá·üê·ûô·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûë·û∂·ûâ·ûô·ûÄ {url}: {e}")

    def download_multiple(self):
        urls = self.multi_url_text.get("1.0", tk.END).strip().splitlines()
        urls = [url.strip() for url in urls if url.strip()]
        if not urls:
            messagebox.showerror("·ûÄ·üÜ·û†·ûª·ûü", "·ûü·ûº·ûò·ûî·ûâ·üí·ûÖ·ûº·ûõ·ûô·üâ·û∂·ûÑ·û†·üÑ·ûÖ·ûé·û∂·ûü·üã URL ·ûò·ûΩ·ûô·üî")
            return
        threading.Thread(target=self.download_multiple_thread, args=(urls,), daemon=True).start()

    def download_multiple_thread(self, urls):
        self.log_status("·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûë·û∂·ûâ·ûô·ûÄ·ûÖ·üí·ûö·ûæ·ûì...")
        with yt_dlp.YoutubeDL(YDL_OPTS) as ydl:
            for url in urls:
                try:
                    self.log_status(f"·ûÄ·üÜ·ûñ·ûª·ûÑ·ûë·û∂·ûâ·ûô·ûÄ: {url}")
                    ydl.download([url])
                    self.log_status(f"‚úÖ ·ûî·û∂·ûì·ûë·û∂·ûâ·ûô·ûÄ: {url}")
                except Exception as e:
                    self.log_status(f"‚ùå ·ûî·ûö·û∂·ûá·üê·ûô·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûë·û∂·ûâ·ûô·ûÄ {url}: {e}")
        self.log_status(f"‚úÖ ·ûë·û∂·ûâ·ûô·ûÄ·ûë·û∂·üÜ·ûÑ·û¢·ûü·üã·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã ‚ûú ·ûö·ûÄ·üí·ûü·û∂·ûë·ûª·ûÄ·ûì·üÖ '{DOWNLOAD_FOLDER}'")

    def download_channel(self):
        url = self.channel_url_entry.get().strip()
        if not url:
            messagebox.showerror("·ûÄ·üÜ·û†·ûª·ûü", "·ûü·ûº·ûò·ûî·ûâ·üí·ûÖ·ûº·ûõ URL ·ûÜ·û∂·ûì·üÇ·ûõ ·û¨·ûî·ûâ·üí·ûá·û∏·ûÖ·û∂·ûÄ·üã·üî")
            return
        threading.Thread(target=self.download_channel_thread, args=(url,), daemon=True).start()

    def download_channel_thread(self, url):
        self.log_status(f"·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûë·û∂·ûâ·ûô·ûÄ·ûÜ·û∂·ûì·üÇ·ûõ/·ûî·ûâ·üí·ûá·û∏·ûÖ·û∂·ûÄ·üã: {url}")
        with yt_dlp.YoutubeDL(YDL_OPTS_CHANNEL) as ydl:
            try:
                ydl.download([url])
                self.log_status(f"‚úÖ ·ûë·û∂·ûâ·ûô·ûÄ·ûÜ·û∂·ûì·üÇ·ûõ/·ûî·ûâ·üí·ûá·û∏·ûÖ·û∂·ûÄ·üã·ûî·û∂·ûì·ûü·ûò·üí·ûö·üÅ·ûÖ ‚ûú ·ûö·ûÄ·üí·ûü·û∂·ûë·ûª·ûÄ·ûì·üÖ '{DOWNLOAD_FOLDER}'")
            except Exception as e:
                self.log_status(f"‚ùå ·ûÄ·üÜ·û†·ûª·ûü·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûë·û∂·ûâ·ûô·ûÄ·ûÜ·û∂·ûì·üÇ·ûõ/·ûî·ûâ·üí·ûá·û∏·ûÖ·û∂·ûÄ·üã: {e}")
                messagebox.showerror("·ûÄ·üÜ·û†·ûª·ûü", f"·ûî·ûö·û∂·ûá·üê·ûô·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûë·û∂·ûâ·ûô·ûÄ·ûÜ·û∂·ûì·üÇ·ûõ/·ûî·ûâ·üí·ûá·û∏·ûÖ·û∂·ûÄ·üã: {e}")


if __name__ == "__main__":
    root = tk.Tk()
    app = YouTubeDownloaderGUI(root)
    root.mainloop()
